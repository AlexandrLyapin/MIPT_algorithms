#include <iostream>
#include <cmath>

void FlyingBrooms(int64_t** dp, int m, int n) {
  dp[0][0] = 1;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (i != n - 1) {
        dp[i + 1][j] += dp[i][j];
      }
      if (i != n - 1 && j != m - 1) {
        dp[i + 1][j + 1] += dp[i][j];
      }
      if (j != m - 1) {
        dp[i][j + 1] += dp[i][j];
      }
    }
  }
  std::cout << dp[n - 1][m - 1];
}

int main() {
  int m;
  std::cin >> m;
  int n;
  std::cin >> n;
  auto dp = new int64_t*[n];
  for (int i = 0; i < n; ++i) {
    dp[i] = new int64_t[m];
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      dp[i][j] = 0;
    }
  }
  FlyingBrooms(dp, m, n);
  for (int i = 0; i < n; ++i) {
    delete[] dp[i];
  }
  delete[] dp;
}