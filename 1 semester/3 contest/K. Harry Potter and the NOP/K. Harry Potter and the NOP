#include <iostream>

void NOP(int* first, int n, int* second, int m, int** dp) {
  for (int i = 0; i <= n; ++i) {
    for (int j = 0; j <= m; ++j) {
      if (i == 0 || j == 0) {
        dp[i][j] = 0;
      } else {
        if (first[i - 1] == second[j - 1]) {
          dp[i][j] = dp[i - 1][j - 1] + 1;
        } else {
          dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);
        }
      }
    }
  }
  auto recovery = new int[dp[n][m]];
  int i = n;
  int j = m;
  int k = dp[n][m] - 1;
  int size = dp[n][m];
  while (i > 0 && j > 0) {
    if (dp[i][j] == std::max(dp[i][j - 1], dp[i - 1][j])) {
      if (dp[i - 1][j] >= dp[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    } else {
      recovery[k] = first[i - 1];
      k--;
      i--;
      j--;
    }
  }
  for (i = 0; i < size; ++i) {
    std::cout << recovery[i] << " ";
  }
  delete[] recovery;
}

int main() {
  int n;
  std::cin >> n;
  auto first = new int[n];
  for (int i = 0; i < n; ++i) {
    std::cin >> first[i];
  }
  int m;
  std::cin >> m;
  auto second = new int[m];
  for (int i = 0; i < m; ++i) {
    std::cin >> second[i];
  }
  auto dp = new int*[n + 1];
  for (int i = 0; i <= n; ++i) {
    dp[i] = new int[m + 1];
  }
  NOP(first, n, second, m, dp);
  delete[] first;
  delete[] second;
  for (int i = 0; i <= n; ++i) {
    delete[] dp[i];
  }
  delete[] dp;
}