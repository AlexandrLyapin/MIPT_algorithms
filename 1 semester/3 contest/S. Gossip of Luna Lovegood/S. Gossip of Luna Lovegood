#include <iostream>
#include <cstring>

void NOP(char* first, int n, char* second, int** dp) {
  for (int i = 0; i <= n; ++i) {
    for (int j = 0; j <= n; ++j) {
      if (i == 0 || j == 0) {
        dp[i][j] = 0;
      } else {
        if (first[i - 1] == second[j - 1]) {
          dp[i][j] = dp[i - 1][j - 1] + 1;
        } else {
          dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);
        }
      }
    }
  }
  std::cout << n - dp[n][n];
}

int main() {
  auto first = new char[10001];
  std::cin.get(first, 10001);
  int n = std::strlen(first);
  auto second = new char[n];
  int k = 0;
  for (int i = n - 1; i >= 0; --i) {
    second[k] = first[i];
    k++;
  }
  auto dp = new int*[n + 1];
  for (int i = 0; i <= n; ++i) {
    dp[i] = new int[n + 1];
  }
  NOP(first, n, second, dp);
  delete[] first;
  delete[] second;
  for (int i = 0; i <= n; ++i) {
    delete[] dp[i];
  }
  delete[] dp;
}