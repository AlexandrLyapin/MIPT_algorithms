#include <iostream>
#include <cstring>

class List {
 public:
  List();
  ~List();

  void Pushback(int key);
  void Pushfront(int key);
  void Popfront();
  void Popback();
  int Size() {
    return size_n_;
  }
  int Front();
  int Back();
  void Clear();

 private:
  class Node {
   public:
    int key;
    Node* next;
    Node* prev;
    explicit Node(int key, Node* next = nullptr, Node* prev = nullptr) {
      this->key = key;
      this->next = next;
      this->prev = prev;
    }
  };
  int size_n_;
  Node* head_;
  Node* tail_;
};

List::List() {
  size_n_ = 0;
  head_ = nullptr;
  tail_ = nullptr;
}

List::~List() = default;

void List::Pushback(int key) {
  if (head_ == nullptr) {
    head_ = new Node(key);
    tail_ = head_;
  } else {
    Node* current = tail_;
    current->next = new Node(key);
    tail_ = current->next;
    tail_->prev = current;
  }
  size_n_++;
}

void List::Pushfront(int key) {
  if (tail_ == nullptr) {
    tail_ = new Node(key);
    head_ = tail_;
  } else {
    Node* current = head_;
    current->prev = new Node(key);
    head_ = current->prev;
    head_->next = current;
  }
  size_n_++;
}

void List::Popfront() {
  Node* temp = head_;
  head_ = head_->next;
  delete temp;
  if (head_ != nullptr) {
    head_->prev = nullptr;
  } else {
    tail_ = nullptr;
  }
  size_n_--;
}

void List::Popback() {
  Node* temp = tail_;
  tail_ = tail_->prev;
  delete temp;
  if (tail_ != nullptr) {
    tail_->next = nullptr;
  } else {
    head_ = nullptr;
  }
  size_n_--;
}

int List::Front() {
  return head_->key;
}

int List::Back() {
  return tail_->key;
}

void List::Clear() {
  while (head_ != nullptr) {
    Node* current = head_->next;
    delete head_;
    head_ = current;
  }
  tail_ = nullptr;
  size_n_ = 0;
}

int main() {
  List lst;
  int n;
  char c[15];
  std::cin >> n;
  for (int i = 0; i < n; ++i) {
    std::cin >> c;
    if (std::strcmp(c, "push_front") == 0) {
      int value;
      std::cin >> value;
      std::cout << "ok\n";
      lst.Pushfront(value);
    }
    if (std::strcmp(c, "pop_front") == 0) {
      if (lst.Size() == 0) {
        std::cout << "error\n";
      } else {
        std::cout << lst.Front() << "\n";
        lst.Popfront();
      }
    }
    if (std::strcmp(c, "push_back") == 0) {
      int value;
      std::cin >> value;
      std::cout << "ok\n";
      lst.Pushback(value);
    }
    if (std::strcmp(c, "pop_back") == 0) {
      if (lst.Size() == 0) {
        std::cout << "error\n";
      } else {
        std::cout << lst.Back() << "\n";
        lst.Popback();
      }
    }
    if (std::strcmp(c, "front") == 0) {
      if (lst.Size() == 0) {
        std::cout << "error\n";
      } else {
        std::cout << lst.Front() << "\n";
      }
    }
    if (std::strcmp(c, "back") == 0) {
      if (lst.Size() == 0) {
        std::cout << "error\n";
      } else {
        std::cout << lst.Back() << "\n";
      }
    }
    if (std::strcmp(c, "size") == 0) {
      std::cout << lst.Size() << "\n";
    }
    if (std::strcmp(c, "clear") == 0) {
      std::cout << "ok\n";
      lst.Clear();
    }
    if (std::strcmp(c, "exit") == 0) {
      std::cout << "bye\n";
      lst.Clear();
      return 0;
    }
  }
}