#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
#include <limits>

struct Pair {
  int vert;
  int edge;

  Pair(const int& first, const int& second) {
    vert = first;
    edge = second;
  }
};

struct Edge {
  int first;
  int second;
  int n;

  bool operator==(const Edge& rhs) {
    return first == rhs.first && second == rhs.second;
  }

  bool operator!=(const Edge& rhs) {
    return first != rhs.first || second != rhs.second;
  }
};

void DFS(const std::vector<std::vector<Pair>>& adjacency_list, std::vector<int>& color, int vert, int par,
         std::vector<int>& bridges, std::vector<int>& time_in, std::vector<int>& time_up, int& time, int start) {
  color[vert] = 1;
  if (time_in[vert] == std::numeric_limits<int>::max()) {
    time_in[vert] = 0;
    time_up[vert] = 0;
  }
  time++;

  if (adjacency_list[vert].empty() && par != -1) {
    time_up[vert] = std::min(time_up[vert], time_in[vert]);
    if (time_up[vert] < time_up[par]) {
      time_up[par] = time_up[vert];
    }
  }

  for (size_t i = 0; i < adjacency_list[vert].size(); ++i) {
    if (color[adjacency_list[vert][i].vert] == 1 && adjacency_list[vert][i].vert != par) {
      int min = std::min(time_in[vert], time_in[adjacency_list[vert][i].vert]);
      time_up[vert] = std::min(time_up[vert], min);
    }
    if (color[adjacency_list[vert][i].vert] == 0) {
      time_in[adjacency_list[vert][i].vert] = time;
      int min = std::min(time_in[vert], time_in[adjacency_list[vert][i].vert]);
      time_up[vert] = std::min(time_up[vert], min);
      DFS(adjacency_list, color, adjacency_list[vert][i].vert, vert, bridges, time_in, time_up, time, start);
    }
    if (par != -1) {
      if (time_up[vert] < time_up[par]) {
        time_up[par] = time_up[vert];
      }
    }
  }

  color[vert] = 2;

  constexpr int kMax = std::numeric_limits<int>::max();

  if (par != -1 && time_in[par] < time_up[vert]) {
    for (size_t i = 0; i < adjacency_list[par].size(); ++i) {
      if (adjacency_list[par][i].vert == vert) {
        if (adjacency_list[par][i].edge > 0 && bridges[adjacency_list[par][i].edge] == kMax) {
          bridges[adjacency_list[par][i].edge] = adjacency_list[par][i].edge;
        }
      }
    }
  }
}

void SearchBridges(const std::vector<std::vector<Pair>>& adjacency_list, int m) {
  size_t n = adjacency_list.size();
  std::vector<int> color(n);
  std::vector<int> time_in(n);
  std::vector<int> time_up(n);

  std::vector<int> bridges;
  bridges.resize(m + 1, std::numeric_limits<int>::max());

  for (size_t i = 0; i < n; ++i) {
    time_in[i] = std::numeric_limits<int>::max();
    time_up[i] = std::numeric_limits<int>::max();
    color[i] = 0;
  }

  int time = 0;

  for (size_t i = 0; i < n; ++i) {
    if (color[i] == 0) {
      DFS(adjacency_list, color, static_cast<int>(i), -1, bridges, time_in, time_up, time, i);
    }
  }

  color.clear();
  color.shrink_to_fit();
  time_in.clear();
  time_in.shrink_to_fit();
  time_up.clear();
  time_up.shrink_to_fit();

  int sum = 0;

  std::sort(bridges.begin(), bridges.end());

  for (size_t i = 0; i < bridges.size(); ++i) {
    if (bridges[i] != std::numeric_limits<int>::max()) {
      sum++;
    } else {
      break;
    }
  }

  std::cout << sum << "\n";

  for (int i = 0; i < sum; ++i) {
    std::cout << bridges[i] << "\n";
  }
}

void MultipleEdgeDetection(std::vector<Edge>& edges, std::vector<std::vector<Pair>>& adjacency_list) {
  std::sort(edges.begin(), edges.end(), [](const Edge& first, const Edge& second) {
    if (first.first != second.first) {
      return first.first < second.first;
    }
    return first.second < second.second;
  });

  bool multiple = false;

  if (!edges.empty()) {
    for (size_t i = 0; i < edges.size() - 1; ++i) {
      if (edges[i] == edges[i + 1]) {
        multiple = true;
        if (i == edges.size() - 2) {
          adjacency_list[edges[i].first].emplace_back(edges[i].second, edges[i].n * -1);
          adjacency_list[edges[i].second].emplace_back(edges[i].first, edges[i].n * -1);
        }
      } else {
        if (!multiple) {
          adjacency_list[edges[i].first].emplace_back(edges[i].second, edges[i].n);
          adjacency_list[edges[i].second].emplace_back(edges[i].first, edges[i].n);
        } else {
          adjacency_list[edges[i].first].emplace_back(edges[i].second, edges[i].n * -1);
          adjacency_list[edges[i].second].emplace_back(edges[i].first, edges[i].n * -1);
        }
        multiple = false;
      }
    }
    if (!multiple) {
      adjacency_list[edges[edges.size() - 1].first].emplace_back(edges[edges.size() - 1].second,
                                                                 edges[edges.size() - 1].n);
      adjacency_list[edges[edges.size() - 1].second].emplace_back(edges[edges.size() - 1].first,
                                                                  edges[edges.size() - 1].n);
    }
  }
}

int main() {
  int n, m;
  std::cin >> n >> m;

  std::vector<std::vector<Pair>> adjacency_list(n);

  int number = 1;

  std::vector<Edge> edges;
  edges.reserve(m);

  for (int i = 0; i < m; ++i) {
    int first, second;
    std::cin >> first >> second;

    if (first != second) {
      first--;
      second--;
      if (first > second) {
        std::swap(first, second);
      }
      Edge edge{first, second, number};
      edges.push_back(edge);
    }
    number++;
  }

  MultipleEdgeDetection(edges, adjacency_list);

  SearchBridges(adjacency_list, m);
}