#include <iostream>
#include <vector>
#include <string>

bool HasCycleDFS(const std::vector<std::vector<int>>& adjacency_list, std::vector<int>& color, int vert) {
  color[vert] = 1;

  for (size_t i = 0; i < adjacency_list[vert].size(); ++i) {
    if (color[adjacency_list[vert][i]] == 1) {
      return true;
    }
    if (color[adjacency_list[vert][i]] == 0) {
      if (HasCycleDFS(adjacency_list, color, adjacency_list[vert][i])) {
        return true;
      }
    }
  }

  color[vert] = 2;
  return false;
}

void PlainTest(const std::vector<std::vector<int>>& adjacency_list) {
  size_t n = adjacency_list.size();
  std::vector<int> color;
  for (size_t i = 0; i < n; ++i) {
    color.push_back(0);
  }

  std::vector<int> parent;
  for (size_t i = 0; i < n; ++i) {
    parent.push_back(-1);
  }

  bool cycle = false;

  for (size_t i = 0; i < n; ++i) {
    if (color[i] == 0) {
      if (HasCycleDFS(adjacency_list, color, i)) {
        cycle = true;
        break;
      }
    }
  }

  if (cycle) {
    std::cout << "NO";
  } else {
    std::cout << "YES";
  }
}

int main() {
  int n;
  std::cin >> n;

  std::vector<std::vector<int>> adjacency_list;

  for (int i = 0; i < n; ++i) {
    std::vector<int> push_vector;
    adjacency_list.push_back(push_vector);
  }

  for (int i = 0; i < n - 1; ++i) {
    int size = n - (i + 1);
    std::string color;
    std::cin >> color;
    for (int j = 0; j < size; ++j) {
      if (color[j] == 'R') {
        adjacency_list[i].push_back(i + j + 1);
      } else {
        if (color[j] == 'B') {
          adjacency_list[i + j + 1].push_back(i);
        }
      }
    }
  }

  PlainTest(adjacency_list);
}