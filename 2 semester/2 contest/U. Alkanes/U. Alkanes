#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

struct Edge {
  int first;
  int second;

  bool operator==(const Edge& rhs) {
    return first == rhs.first && second == rhs.second;
  }

  bool operator!=(const Edge& rhs) {
    return first != rhs.first || second != rhs.second;
  }
};

bool HasCycleDFS(const std::vector<std::vector<int>>& adjacency_list, std::vector<int>& color, std::vector<int>& parent,
                 int vert, int par) {
  color[vert] = 1;
  parent[vert] = par;

  for (size_t i = 0; i < adjacency_list[vert].size(); ++i) {
    if (color[adjacency_list[vert][i]] == 1 && adjacency_list[vert][i] != par) {
      parent[adjacency_list[vert][i]] = vert;
      return true;
    }
    if (color[adjacency_list[vert][i]] == 0 && adjacency_list[vert][i] != par) {
      if (HasCycleDFS(adjacency_list, color, parent, adjacency_list[vert][i], vert)) {
        return true;
      }
    }
  }

  color[vert] = 2;
  return false;
}

void Alkane(const std::vector<std::vector<int>>& adjacency_list, const std::string& molecule) {
  size_t n = adjacency_list.size();

  std::vector<int> color;
  color.resize(n, 0);

  std::vector<int> parent;
  parent.resize(n, -1);

  if (HasCycleDFS(adjacency_list, color, parent, 0, -1)) {
    std::cout << "NO";
    return;
  }

  for (size_t i = 0; i < n; ++i) {
    if (color[i] == 0) {
      std::cout << "NO";
      return;
    }
  }

  for (size_t i = 0; i < n; ++i) {
    if (molecule[i] == 'H') {
      if (adjacency_list[i].size() != 1) {
        std::cout << "NO";
        return;
      }
      if (molecule[adjacency_list[i][0]] == 'H') {
        std::cout << "NO";
        return;
      }
    } else {
      if (adjacency_list[i].size() != 4) {
        std::cout << "NO";
        return;
      }
    }
  }

  std::cout << "YES";
}

bool MultipleEdgeDetection(std::vector<Edge>& edges) {
  if (edges.empty()) {
    return true;
  }
  std::sort(edges.begin(), edges.end(), [](const Edge& first, const Edge& second) {
    if (first.first != second.first) {
      return first.first < second.first;
    }
    return first.second < second.second;
  });

  for (size_t i = 0; i < edges.size() - 1; ++i) {
    if (edges[i] == edges[i + 1]) {
      return true;
    }
  }

  return false;
}

int main() {
  int n, m;
  std::cin >> n >> m;

  std::vector<std::vector<int>> adjacency_list;

  adjacency_list.reserve(n);
  for (int i = 0; i < n; ++i) {
    std::vector<int> push_vector;
    adjacency_list.push_back(push_vector);
  }

  std::string molecule;

  for (int i = 0; i < n; ++i) {
    char atom;
    std::cin >> atom;
    molecule += atom;
  }

  std::vector<Edge> edges;
  edges.reserve(m);

  for (int i = 0; i < m; ++i) {
    int first, second;
    std::cin >> first >> second;

    if (first != second) {
      first--;
      second--;
      if (first > second) {
        std::swap(first, second);
      }
      Edge edge{first, second};
      edges.push_back(edge);
    } else {
      std::cout << "NO";
      return 0;
    }
  }

  if (MultipleEdgeDetection(edges)) {
    std::cout << "NO";
    return 0;
  }

  for (int i = 0; i < m; ++i) {
    int first, second;
    first = edges[i].first;
    second = edges[i].second;
    adjacency_list[first].push_back(second);
    adjacency_list[second].push_back(first);
  }

  Alkane(adjacency_list, molecule);
}