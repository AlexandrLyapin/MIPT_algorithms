#include <iostream>
#include <vector>

class Graph {
 public:
  int n, m;
  std::vector<int> parent;
  std::vector<int> rank;
  std::vector<int> sum;

  int FindSet(int x) {
    if (parent[x] == -1) {
      return -1;
    }

    while (x != parent[x]) {
      x = parent[x];
    }

    return x;
  }

  void Union(int first, int second) {
    if (rank[first] >= rank[second]) {
      parent[second] = first;
      if (rank[second] == rank[first]) {
        ++rank[first];
      }
      rank[second] = -1;
    } else {
      parent[first] = second;
      if (rank[first] == rank[second]) {
        ++rank[second];
      }
      rank[first] = -1;
    }
  }

  void AddingEdge(int v1, int v2, int w) {
    int first = FindSet(v1);
    int second = FindSet(v2);

    if (first == -1 && second == -1) {
      parent[v1] = v1;
      parent[v2] = v1;
      rank[v1] = 1;
      sum[v1] = w;
    }

    if (first != -1 && second != -1) {
      if (first != second) {
        if (rank[first] >= rank[second]) {
          sum[first] += sum[second] + w;
        } else {
          sum[second] += sum[first] + w;
        }
        Union(first, second);
      } else {
        sum[first] += w;
      }
    }

    if (first != -1 && second == -1) {
      parent[v2] = first;
      sum[first] += w;
    }

    if (first == -1 && second != -1) {
      parent[v1] = second;
      sum[second] += w;
    }
  }

  int EdgeSum(int vertex) {
    int root = FindSet(vertex);
    if (root == -1) {
      return 0;
    }

    return sum[root];
  }
};

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  Graph graph;

  std::cin >> graph.n >> graph.m;

  graph.parent.resize(graph.n, -1);
  graph.rank.resize(graph.n, -1);
  graph.sum.resize(graph.n, 0);

  for (int i = 0; i < graph.m; ++i) {
    int type = 0;
    std::cin >> type;

    if (type == 1) {
      int vertex1 = 0;
      int vertex2 = 0;
      int weight = 0;
      std::cin >> vertex1 >> vertex2 >> weight;
      --vertex1;
      --vertex2;
      graph.AddingEdge(vertex1, vertex2, weight);
    }

    if (type == 2) {
      int vertex = 0;
      std::cin >> vertex;
      --vertex;
      std::cout << graph.EdgeSum(vertex) << "\n";
    }
  }
}